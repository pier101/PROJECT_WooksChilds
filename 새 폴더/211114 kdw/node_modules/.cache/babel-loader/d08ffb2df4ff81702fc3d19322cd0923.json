{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ME\\\\Documents\\\\\\uCE74\\uCE74\\uC624\\uD1A1 \\uBC1B\\uC740 \\uD30C\\uC77C\\\\\\uC0C8 \\uD3F4\\uB354\\\\211114 kdw\\\\src\\\\components\\\\artist\\\\index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport TextareaAutosize from '@mui/material/TextareaAutosize';\nimport { Box } from '@mui/material'; //feed관련 메인 컴포넌트\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Artist = _ref => {\n  _s();\n\n  let {\n    match\n  } = _ref;\n  console.log(match);\n  const [content, setContent] = useState(\"\"); //const content = \"\"인 상태\n\n  const [viewContent, setViewContent] = useState([]);\n  const [viewComment, setViewComment] = useState([]);\n  const [comment, setComment] = useState(\"\");\n  const [isTrue, setIsTrue] = useState(false); //게시글 작성시 db에 저장하는 함수\n\n  const PostWrite = async e => {\n    e.preventDefault();\n    await axios.post(`http://localhost:5000/artist/posts/${match.params.name}`, {\n      content,\n      id: sessionStorage.user_id\n    }); // if(res.data) {\n    //     alert('데이터를 추가했습니다.');    \n    //     //새로고침시 업데이트 되는걸 새로고침 없이 업데이트 되게 손 봐야됨\n    // }  \n\n    const axiosData = async () => {\n      const res = await axios.get(`http://localhost:5000/artist/posts/${match.params.name}`); //package.json 밑에 (proxy:주소) 넣어주면 경로에 서버주소 안 넣어도 됨\n\n      const desc = res.data;\n      desc.sort((data, nextdata) => {\n        return nextdata.feedNum - data.feedNum;\n      });\n      setViewContent(res.data);\n    };\n\n    axiosData();\n  }; //댓글 등록\n\n\n  const addComment = async e => {\n    e.preventDefault();\n    const feedNumber = e.target.id;\n    await axios.post(`http://localhost:5000/artist/comment`, {\n      comment,\n      id: sessionStorage.user_id,\n      feedNumber: feedNumber,\n      name: match.params.name\n    });\n    await axios.get(`http://localhost:5000/artist/comment/${match.params.name}`).then(res => {\n      console.log(res.data);\n      setViewComment(res.data);\n    });\n  };\n\n  const handleComment = e => {\n    console.log(viewComment);\n    setComment(e.target.value);\n  }; //댓글 수정\n\n\n  const isTrueHandler = () => {\n    setIsTrue(true);\n  };\n\n  useEffect(() => {\n    const getFeed = async () => {\n      await axios.get(`http://localhost:5000/artist/posts/${match.params.name}`) //package.json 밑에 (proxy:주소) 넣어주면 경로에 서버주소 안 넣어도 됨\n      .then(res => {\n        //내림차순 정렬\n        const desc = res.data;\n        desc.sort((data, nextdata) => {\n          return nextdata.feedNum - data.feedNum;\n        });\n        setViewContent(res.data);\n      }).catch(err => console.log(err));\n    };\n\n    const getComment = async () => {\n      await axios.get(`http://localhost:5000/artist/comment/${match.params.name}`).then(res => {\n        console.log(res.data);\n        setViewComment(res.data);\n      });\n    };\n\n    getFeed();\n    getComment();\n  }, []);\n\n  const ChangePostContent = e => {\n    setContent(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 10\n      },\n      children: /*#__PURE__*/_jsxDEV(ArtistInfo, {\n        match: match\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        method: \"POST\",\n        onSubmit: PostWrite,\n        children: [/*#__PURE__*/_jsxDEV(TextareaAutosize, {\n          type: \"text\",\n          value: content,\n          \"aria-label\": \"empty textarea\",\n          placeholder: \"Empty\",\n          onChange: ChangePostContent,\n          style: {\n            width: 200,\n            height: 150\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"\\uC644\\uB8CC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            method: \"POST\",\n            children: viewContent && viewContent.map(data => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: data.feedContent\n                }, toString(data.feedNum), false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  children: \"\\uC0AD\\uC81C\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 106,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"legend\", {\n                  children: /*#__PURE__*/_jsxDEV(\"h6\", {\n                    children: \"comment\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 107,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  style: {\n                    listStyle: \"none\"\n                  },\n                  children: [viewComment && viewComment.map(data1 => {\n                    return (\n                      /*#__PURE__*/\n                      // 해당피드게시물에 관한 댓글 보이게 하기\n                      _jsxDEV(\"li\", {\n                        children: data1.feedNum === data.feedNum && data1.commentContent\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 112,\n                        columnNumber: 45\n                      }, this)\n                    );\n                  }), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                      onChange: handleComment,\n                      value: comment,\n                      id: \"comment\",\n                      cols: \"30\",\n                      rows: \"2\",\n                      children: data.feedNum\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 117,\n                      columnNumber: 41\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      id: Number(data.feedNum),\n                      className: \"commentcreatebtn\",\n                      type: \"button\",\n                      value: \"\\uB313\\uAE00\\uB4F1\\uB85D\",\n                      onClick: addComment\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 118,\n                      columnNumber: 41\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      type: \"button\",\n                      onClick: isTrueHandler,\n                      children: \"\\uC218\\uC815\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 119,\n                      columnNumber: 41\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 115,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 29\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Artist, \"NVlVdCpojKqzVrv/mhyDqBXZaIs=\");\n\n_c = Artist;\n\nconst ArtistInfo = _ref2 => {\n  _s2();\n\n  let {\n    match\n  } = _ref2;\n  const [viewArtistInfo, setArtistInfo] = useState([]);\n  useEffect(() => {\n    const artistinfo = async () => {\n      const getartistinfo = await axios.get(`http://localhost:5000/artist/artistinfo/${match.params.name}`);\n      setArtistInfo(getartistinfo.data[0]);\n    };\n\n    artistinfo(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: viewArtistInfo.artistCardImg,\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: viewArtistInfo.artistName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(ArtistInfo, \"YfCnp+y6zhjt9k7i1TO7zbeS22c=\");\n\n_c2 = ArtistInfo;\nexport default Artist;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Artist\");\n$RefreshReg$(_c2, \"ArtistInfo\");","map":{"version":3,"sources":["C:/Users/ME/Documents/카카오톡 받은 파일/새 폴더/211114 kdw/src/components/artist/index.js"],"names":["React","useState","useEffect","axios","TextareaAutosize","Box","Artist","match","console","log","content","setContent","viewContent","setViewContent","viewComment","setViewComment","comment","setComment","isTrue","setIsTrue","PostWrite","e","preventDefault","post","params","name","id","sessionStorage","user_id","axiosData","res","get","desc","data","sort","nextdata","feedNum","addComment","feedNumber","target","then","handleComment","value","isTrueHandler","getFeed","catch","err","getComment","ChangePostContent","mt","width","height","map","feedContent","toString","listStyle","data1","commentContent","Number","ArtistInfo","viewArtistInfo","setArtistInfo","artistinfo","getartistinfo","artistCardImg","artistName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\nimport TextareaAutosize from '@mui/material/TextareaAutosize'\r\nimport {Box} from '@mui/material';\r\n\r\n//feed관련 메인 컴포넌트\r\nconst Artist = ({match}) => {\r\n    console.log(match)\r\n    const [content, setContent] = useState(\"\") //const content = \"\"인 상태\r\n    \r\n    const [viewContent , setViewContent] = useState([]);\r\n    const [viewComment , setViewComment] = useState([]);\r\n    const [comment, setComment] = useState(\"\")\r\n    const [isTrue, setIsTrue] = useState(false)\r\n\r\n    //게시글 작성시 db에 저장하는 함수\r\n    const PostWrite = async(e) => {\r\n        e.preventDefault();\r\n      await axios.post(`http://localhost:5000/artist/posts/${match.params.name}`,{content,id :sessionStorage.user_id});\r\n        // if(res.data) {\r\n        //     alert('데이터를 추가했습니다.');    \r\n        //     //새로고침시 업데이트 되는걸 새로고침 없이 업데이트 되게 손 봐야됨\r\n        // }  \r\n        const axiosData = async ()=>{\r\n            const res = await axios.get(`http://localhost:5000/artist/posts/${match.params.name}`) //package.json 밑에 (proxy:주소) 넣어주면 경로에 서버주소 안 넣어도 됨\r\n            const desc= res.data\r\n                desc.sort((data, nextdata )=> {\r\n                    return nextdata.feedNum - data.feedNum\r\n                })\r\n            setViewContent(res.data)\r\n        };\r\n        axiosData();\r\n    }\r\n    \r\n    //댓글 등록\r\n    const addComment = async(e)=>{\r\n        e.preventDefault();\r\n        const feedNumber = e.target.id\r\n        await axios.post(`http://localhost:5000/artist/comment`,{comment, id :sessionStorage.user_id ,feedNumber : feedNumber, name: match.params.name})\r\n        \r\n        await axios.get(`http://localhost:5000/artist/comment/${match.params.name}`)\r\n        .then(res=>{\r\n            console.log(res.data)\r\n            setViewComment(res.data)\r\n        })\r\n    }\r\n    const handleComment = (e) =>{\r\n        console.log(viewComment)\r\n            setComment(e.target.value)\r\n       \r\n    }\r\n    \r\n\r\n    //댓글 수정\r\n    const isTrueHandler = ()=>{\r\n        setIsTrue(true)\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        const getFeed = async ()=>{\r\n            await axios.get(`http://localhost:5000/artist/posts/${match.params.name}`) //package.json 밑에 (proxy:주소) 넣어주면 경로에 서버주소 안 넣어도 됨\r\n            .then(res=>{\r\n                //내림차순 정렬\r\n                const desc= res.data\r\n                desc.sort((data, nextdata )=> {\r\n                    return nextdata.feedNum - data.feedNum\r\n                })\r\n            setViewContent(res.data)\r\n            }).catch(err=>console.log(err))\r\n        };  \r\n\r\n        const getComment = async ()=>{\r\n            await axios.get(`http://localhost:5000/artist/comment/${match.params.name}`)\r\n            .then(res=>{\r\n                console.log(res.data)\r\n                setViewComment(res.data)\r\n            })\r\n        }\r\n        getFeed();\r\n        getComment()\r\n    },[])\r\n\r\n    const ChangePostContent = e=> {\r\n        setContent(e.target.value)\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n                <Box  sx={{mt: 10}}>\r\n                    <ArtistInfo match={match}/>\r\n                </Box>\r\n                <div>\r\n                    <form method='POST' onSubmit={PostWrite}>\r\n                        <TextareaAutosize type=\"text\" value={content} aria-label=\"empty textarea\" placeholder=\"Empty\" onChange={ChangePostContent} style={{ width: 200,height: 150 , }}/>\r\n                        {/* <input type='text' maxLength='20' placeholder='noticeContent' onChange={(e) => this.noticeContentCreate(e)}/> */}\r\n                        <input type='submit' value='완료' />\r\n                        {/* <Post/> */}\r\n                    <div>\r\n                        <form method=\"POST\">\r\n                        {viewContent && viewContent.map((data) =>{\r\n                            return (\r\n                            <div>                        \r\n                                    \r\n                            <p key={toString(data.feedNum)} >{data.feedContent}</p>\r\n                            <button type=\"button\" >삭제</button>\r\n                            <legend><h6>comment</h6></legend>\r\n                                <ul style={{listStyle:\"none\"}}>\r\n                                    {viewComment &&viewComment.map(data1 => {\r\n                                        return(\r\n                                            // 해당피드게시물에 관한 댓글 보이게 하기\r\n                                            <li>{data1.feedNum ===data.feedNum && data1.commentContent}</li>\r\n                                        )\r\n                                    })}\r\n                                    <li>\r\n                                        {/* <span id=\"myId\">{db아이디}</span> */}\r\n                                        <textarea  onChange={handleComment} value={comment} id=\"comment\" cols=\"30\" rows=\"2\">{data.feedNum}</textarea>\r\n                                        <input id={Number(data.feedNum)} className=\"commentcreatebtn\" type=\"button\" value=\"댓글등록\" onClick={addComment}/>\r\n                                        <button type='button' onClick={isTrueHandler}>수정</button>\r\n                                    </li>\r\n                                        {/* ##여기 댓글리스트 등록하기 */}\r\n                                </ul>\r\n                            </div>\r\n                            )\r\n                        })}\r\n                        </form>\r\n                    </div>      \r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\nconst ArtistInfo = ({match}) => {\r\n   \r\n    const [viewArtistInfo , setArtistInfo] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        const artistinfo =async()=> {\r\n            const getartistinfo = await axios.get(`http://localhost:5000/artist/artistinfo/${match.params.name}`)\r\n            setArtistInfo(getartistinfo.data[0])\r\n\r\n        }\r\n        artistinfo();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        },[])\r\n    return (\r\n        <div>\r\n            <img src={viewArtistInfo.artistCardImg} alt=\"\" />\r\n           <h2>{viewArtistInfo.artistName}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Artist;\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}