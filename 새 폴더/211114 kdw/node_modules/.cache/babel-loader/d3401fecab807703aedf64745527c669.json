{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"component\", \"columns\", \"spacing\", \"defaultColumns\", \"defaultHeight\", \"defaultSpacing\"];\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { createUnarySpacing, getValue, handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { deepmerge, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { getMasonryUtilityClass } from './masonryClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getMasonryUtilityClass, classes);\n}; // compute base for responsive values; e.g.,\n// [1,2,3] => {xs: true, sm: true, md: true}\n// {xs: 1, sm: 2, md: 3} => {xs: true, sm: true, md: true}\n\n\nconst computeBreakpointsBase = (breakpoints, prop) => {\n  const base = {};\n\n  if (Array.isArray(prop)) {\n    Object.keys(breakpoints.values).forEach((breakpoint, i, arr) => {\n      if (i < arr.length) {\n        base[breakpoint] = true;\n      }\n    });\n  } else {\n    Object.keys(breakpoints.values).forEach(breakpoint => {\n      if (prop[breakpoint] != null) {\n        base[breakpoint] = true;\n      }\n    });\n  }\n\n  return base;\n}; // if prop is an array, convert to object; e.g.,\n// (base: {xs: true, sm: true, md: true}, prop: [1,2,3]) => {xs: 1, sm: 2, md: 3}\n\n\nconst validatePropValues = (base, prop) => {\n  const values = {};\n\n  if (Array.isArray(prop)) {\n    Object.keys(base).forEach((breakpoint, i) => {\n      values[breakpoint] = prop[i];\n    });\n    return values;\n  }\n\n  return prop;\n};\n\nexport const getStyle = _ref => {\n  let {\n    ownerState,\n    theme\n  } = _ref;\n  let styles = {\n    width: '100%',\n    display: 'flex',\n    flexFlow: 'column wrap',\n    alignContent: 'space-between',\n    boxSizing: 'border-box',\n    '& > *': {\n      boxSizing: 'border-box'\n    }\n  };\n  const stylesSSR = {};\n\n  if (ownerState.isSSR) {\n    const orderStyleSSR = {};\n    const defaultSpacing = Number(theme.spacing(ownerState.defaultSpacing).replace('px', ''));\n\n    for (let i = 1; i <= ownerState.defaultColumns; i += 1) {\n      orderStyleSSR[`&:nth-of-type(${ownerState.defaultColumns}n+${i % ownerState.defaultColumns})`] = {\n        order: i\n      };\n    }\n\n    stylesSSR.height = ownerState.defaultHeight;\n    stylesSSR.margin = -(defaultSpacing / 2);\n    stylesSSR['& > *'] = _extends({}, styles['& > *'], orderStyleSSR, {\n      margin: defaultSpacing / 2,\n      width: `calc(${(100 / ownerState.defaultColumns).toFixed(2)}% - ${defaultSpacing}px)`\n    });\n    return _extends({}, styles, stylesSSR);\n  }\n\n  const spacingBreakpointsBase = computeBreakpointsBase(theme.breakpoints, ownerState.spacing);\n  const spacingValues = resolveBreakpointValues({\n    values: validatePropValues(spacingBreakpointsBase, ownerState.spacing),\n    base: spacingBreakpointsBase\n  });\n  const transformer = createUnarySpacing(theme);\n\n  const spacingStyleFromPropValue = propValue => {\n    const themeSpacingValue = Number(propValue);\n    const spacing = Number(getValue(transformer, themeSpacingValue).replace('px', ''));\n    return _extends({\n      margin: -(spacing / 2),\n      '& > *': {\n        margin: spacing / 2\n      }\n    }, ownerState.maxColumnHeight && {\n      height: Math.ceil(ownerState.maxColumnHeight + spacing)\n    });\n  };\n\n  styles = deepmerge(styles, handleBreakpoints({\n    theme\n  }, spacingValues, spacingStyleFromPropValue));\n  const columnBreakpointsBase = computeBreakpointsBase(theme.breakpoints, ownerState.columns);\n  const columnValues = resolveBreakpointValues({\n    values: validatePropValues(columnBreakpointsBase, ownerState.columns),\n    base: columnBreakpointsBase\n  });\n\n  const columnStyleFromPropValue = propValue => {\n    const columnValue = Number(propValue);\n    const width = `${(100 / columnValue).toFixed(2)}%`;\n    const spacing = typeof spacingValues !== 'object' ? getValue(transformer, Number(spacingValues)) : '0px';\n    return {\n      '& > *': {\n        width: `calc(${width} - ${spacing})`\n      }\n    };\n  };\n\n  styles = deepmerge(styles, handleBreakpoints({\n    theme\n  }, columnValues, columnStyleFromPropValue)); // configure width for responsive spacing values\n\n  if (typeof spacingValues === 'object') {\n    styles = deepmerge(styles, handleBreakpoints({\n      theme\n    }, spacingValues, (propValue, breakpoint) => {\n      if (breakpoint) {\n        const themeSpacingValue = Number(propValue);\n        const lastBreakpoint = Object.keys(columnValues).pop();\n        const spacing = getValue(transformer, themeSpacingValue);\n        const column = typeof columnValues === 'object' ? columnValues[breakpoint] || columnValues[lastBreakpoint] : columnValues;\n        const width = `${(100 / column).toFixed(2)}%`;\n        return {\n          '& > *': {\n            width: `calc(${width} - ${spacing})`\n          }\n        };\n      }\n\n      return null;\n    }));\n  }\n\n  return styles;\n};\nconst MasonryRoot = styled('div', {\n  name: 'MuiMasonry',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    return [styles.root];\n  }\n})(getStyle);\nconst Masonry = /*#__PURE__*/React.forwardRef(function Masonry(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiMasonry'\n  });\n\n  const {\n    children,\n    className,\n    component = 'div',\n    columns = 4,\n    spacing = 1,\n    defaultColumns,\n    defaultHeight,\n    defaultSpacing\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const masonryRef = React.useRef();\n  const [maxColumnHeight, setMaxColumnHeight] = React.useState();\n  const isSSR = !maxColumnHeight && defaultHeight && defaultColumns !== undefined && defaultSpacing !== undefined;\n  const [numberOfLineBreaks, setNumberOfLineBreaks] = React.useState(isSSR ? defaultColumns - 1 : 0);\n\n  const ownerState = _extends({}, props, {\n    spacing,\n    columns,\n    maxColumnHeight,\n    defaultColumns,\n    defaultHeight,\n    defaultSpacing,\n    isSSR\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  React.useEffect(() => {\n    const handleResize = () => {\n      const parentWidth = masonryRef.current.clientWidth;\n      const childWidth = masonryRef.current.firstChild.clientWidth;\n      const firstChildComputedStyle = window.getComputedStyle(masonryRef.current.firstChild);\n      const firstChildMarginLeft = Number(firstChildComputedStyle.marginLeft.replace('px', ''));\n      const firstChildMarginRight = Number(firstChildComputedStyle.marginRight.replace('px', ''));\n\n      if (parentWidth === 0 || childWidth === 0) {\n        return;\n      }\n\n      const currentNumberOfColumns = Math.round(parentWidth / (childWidth + firstChildMarginLeft + firstChildMarginRight));\n      const columnHeights = new Array(currentNumberOfColumns).fill(0);\n      let skip = false;\n      masonryRef.current.childNodes.forEach(child => {\n        if (child.nodeType !== Node.ELEMENT_NODE || child.dataset.class === 'line-break' || skip) {\n          return;\n        }\n\n        const childComputedStyle = window.getComputedStyle(child);\n        const childMarginTop = Number(childComputedStyle.marginTop.replace('px', ''));\n        const childMarginBottom = Number(childComputedStyle.marginBottom.replace('px', '')); // if any one of children isn't rendered yet, masonry's height shouldn't be computed yet\n\n        const childHeight = child.clientHeight ? Math.ceil(child.clientHeight) + childMarginTop + childMarginBottom : 0;\n\n        if (childHeight === 0) {\n          skip = true;\n          return;\n        } // if there is a nested image that isn't rendered yet, masonry's height shouldn't be computed yet\n\n\n        for (let i = 0; i < child.childNodes.length; i += 1) {\n          const nestedChild = child.childNodes[i];\n\n          if (nestedChild.tagName === 'IMG' && nestedChild.clientHeight === 0) {\n            skip = true;\n            break;\n          }\n        }\n\n        if (!skip) {\n          // find the current shortest column (where the current item will be placed)\n          const currentMinColumnIndex = columnHeights.indexOf(Math.min(...columnHeights));\n          columnHeights[currentMinColumnIndex] += childHeight;\n          const order = currentMinColumnIndex + 1;\n          child.style.order = order;\n        }\n      });\n\n      if (!skip) {\n        setMaxColumnHeight(Math.max(...columnHeights));\n        const numOfLineBreaks = currentNumberOfColumns > 0 ? currentNumberOfColumns - 1 : 0;\n        setNumberOfLineBreaks(numOfLineBreaks);\n      }\n    }; // IE and old browsers are not supported\n\n\n    if (typeof ResizeObserver === 'undefined') {\n      return null;\n    }\n\n    const resizeObserver = new ResizeObserver(handleResize);\n    const container = masonryRef.current;\n\n    if (container) {\n      // only the masonry container and its first child are observed for resizing;\n      // this might cause unforeseen problems in some use cases;\n      resizeObserver.observe(container);\n\n      if (container.firstChild) {\n        resizeObserver.observe(container.firstChild);\n      }\n    }\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [columns, spacing]);\n  const handleRef = useForkRef(ref, masonryRef);\n  const lineBreakStyle = {\n    flexBasis: '100%',\n    width: 0,\n    margin: 0,\n    padding: 0\n  }; //  columns are likely to have different heights and hence can start to merge;\n  //  a line break at the end of each column prevents columns from merging\n\n  const lineBreaks = new Array(numberOfLineBreaks).fill('').map((_, index) => /*#__PURE__*/_jsx(\"span\", {\n    \"data-class\": \"line-break\",\n    style: _extends({}, lineBreakStyle, {\n      order: index + 1\n    })\n  }, index));\n  return /*#__PURE__*/_jsxs(MasonryRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ref: handleRef,\n    ownerState: ownerState\n  }, other, {\n    children: [children, lineBreaks]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Masonry.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Number of columns.\n   * @default 4\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The default number of columns of the component. This is provided for server-side rendering.\n   */\n  defaultColumns: PropTypes.number,\n\n  /**\n   * The default height of the component in px. This is provided for server-side rendering.\n   */\n  defaultHeight: PropTypes.number,\n\n  /**\n   * The default spacing of the component. Like `spacing`, it is a factor of the theme's spacing. This is provided for server-side rendering.\n   */\n  defaultSpacing: PropTypes.number,\n\n  /**\n   * Defines the space between children. It is a factor of the theme's spacing.\n   * @default 1\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Masonry;","map":{"version":3,"sources":["C:/Users/ME/Documents/카카오톡 받은 파일/새 폴더/211114 kdw/node_modules/@mui/lab/Masonry/Masonry.js"],"names":["_objectWithoutPropertiesLoose","_extends","_excluded","unstable_composeClasses","composeClasses","styled","useThemeProps","createUnarySpacing","getValue","handleBreakpoints","unstable_resolveBreakpointValues","resolveBreakpointValues","deepmerge","unstable_useForkRef","useForkRef","clsx","PropTypes","React","getMasonryUtilityClass","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","classes","slots","root","computeBreakpointsBase","breakpoints","prop","base","Array","isArray","Object","keys","values","forEach","breakpoint","i","arr","length","validatePropValues","getStyle","theme","styles","width","display","flexFlow","alignContent","boxSizing","stylesSSR","isSSR","orderStyleSSR","defaultSpacing","Number","spacing","replace","defaultColumns","order","height","defaultHeight","margin","toFixed","spacingBreakpointsBase","spacingValues","transformer","spacingStyleFromPropValue","propValue","themeSpacingValue","maxColumnHeight","Math","ceil","columnBreakpointsBase","columns","columnValues","columnStyleFromPropValue","columnValue","lastBreakpoint","pop","column","MasonryRoot","name","slot","overridesResolver","props","Masonry","forwardRef","inProps","ref","children","className","component","other","masonryRef","useRef","setMaxColumnHeight","useState","undefined","numberOfLineBreaks","setNumberOfLineBreaks","useEffect","handleResize","parentWidth","current","clientWidth","childWidth","firstChild","firstChildComputedStyle","window","getComputedStyle","firstChildMarginLeft","marginLeft","firstChildMarginRight","marginRight","currentNumberOfColumns","round","columnHeights","fill","skip","childNodes","child","nodeType","Node","ELEMENT_NODE","dataset","class","childComputedStyle","childMarginTop","marginTop","childMarginBottom","marginBottom","childHeight","clientHeight","nestedChild","tagName","currentMinColumnIndex","indexOf","min","style","max","numOfLineBreaks","ResizeObserver","resizeObserver","container","observe","disconnect","handleRef","lineBreakStyle","flexBasis","padding","lineBreaks","map","_","index","as","process","env","NODE_ENV","propTypes","node","isRequired","object","string","oneOfType","arrayOf","number","elementType","sx","func"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"component\", \"columns\", \"spacing\", \"defaultColumns\", \"defaultHeight\", \"defaultSpacing\"];\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { createUnarySpacing, getValue, handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { deepmerge, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { getMasonryUtilityClass } from './masonryClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getMasonryUtilityClass, classes);\n}; // compute base for responsive values; e.g.,\n// [1,2,3] => {xs: true, sm: true, md: true}\n// {xs: 1, sm: 2, md: 3} => {xs: true, sm: true, md: true}\n\n\nconst computeBreakpointsBase = (breakpoints, prop) => {\n  const base = {};\n\n  if (Array.isArray(prop)) {\n    Object.keys(breakpoints.values).forEach((breakpoint, i, arr) => {\n      if (i < arr.length) {\n        base[breakpoint] = true;\n      }\n    });\n  } else {\n    Object.keys(breakpoints.values).forEach(breakpoint => {\n      if (prop[breakpoint] != null) {\n        base[breakpoint] = true;\n      }\n    });\n  }\n\n  return base;\n}; // if prop is an array, convert to object; e.g.,\n// (base: {xs: true, sm: true, md: true}, prop: [1,2,3]) => {xs: 1, sm: 2, md: 3}\n\n\nconst validatePropValues = (base, prop) => {\n  const values = {};\n\n  if (Array.isArray(prop)) {\n    Object.keys(base).forEach((breakpoint, i) => {\n      values[breakpoint] = prop[i];\n    });\n    return values;\n  }\n\n  return prop;\n};\n\nexport const getStyle = ({\n  ownerState,\n  theme\n}) => {\n  let styles = {\n    width: '100%',\n    display: 'flex',\n    flexFlow: 'column wrap',\n    alignContent: 'space-between',\n    boxSizing: 'border-box',\n    '& > *': {\n      boxSizing: 'border-box'\n    }\n  };\n  const stylesSSR = {};\n\n  if (ownerState.isSSR) {\n    const orderStyleSSR = {};\n    const defaultSpacing = Number(theme.spacing(ownerState.defaultSpacing).replace('px', ''));\n\n    for (let i = 1; i <= ownerState.defaultColumns; i += 1) {\n      orderStyleSSR[`&:nth-of-type(${ownerState.defaultColumns}n+${i % ownerState.defaultColumns})`] = {\n        order: i\n      };\n    }\n\n    stylesSSR.height = ownerState.defaultHeight;\n    stylesSSR.margin = -(defaultSpacing / 2);\n    stylesSSR['& > *'] = _extends({}, styles['& > *'], orderStyleSSR, {\n      margin: defaultSpacing / 2,\n      width: `calc(${(100 / ownerState.defaultColumns).toFixed(2)}% - ${defaultSpacing}px)`\n    });\n    return _extends({}, styles, stylesSSR);\n  }\n\n  const spacingBreakpointsBase = computeBreakpointsBase(theme.breakpoints, ownerState.spacing);\n  const spacingValues = resolveBreakpointValues({\n    values: validatePropValues(spacingBreakpointsBase, ownerState.spacing),\n    base: spacingBreakpointsBase\n  });\n  const transformer = createUnarySpacing(theme);\n\n  const spacingStyleFromPropValue = propValue => {\n    const themeSpacingValue = Number(propValue);\n    const spacing = Number(getValue(transformer, themeSpacingValue).replace('px', ''));\n    return _extends({\n      margin: -(spacing / 2),\n      '& > *': {\n        margin: spacing / 2\n      }\n    }, ownerState.maxColumnHeight && {\n      height: Math.ceil(ownerState.maxColumnHeight + spacing)\n    });\n  };\n\n  styles = deepmerge(styles, handleBreakpoints({\n    theme\n  }, spacingValues, spacingStyleFromPropValue));\n  const columnBreakpointsBase = computeBreakpointsBase(theme.breakpoints, ownerState.columns);\n  const columnValues = resolveBreakpointValues({\n    values: validatePropValues(columnBreakpointsBase, ownerState.columns),\n    base: columnBreakpointsBase\n  });\n\n  const columnStyleFromPropValue = propValue => {\n    const columnValue = Number(propValue);\n    const width = `${(100 / columnValue).toFixed(2)}%`;\n    const spacing = typeof spacingValues !== 'object' ? getValue(transformer, Number(spacingValues)) : '0px';\n    return {\n      '& > *': {\n        width: `calc(${width} - ${spacing})`\n      }\n    };\n  };\n\n  styles = deepmerge(styles, handleBreakpoints({\n    theme\n  }, columnValues, columnStyleFromPropValue)); // configure width for responsive spacing values\n\n  if (typeof spacingValues === 'object') {\n    styles = deepmerge(styles, handleBreakpoints({\n      theme\n    }, spacingValues, (propValue, breakpoint) => {\n      if (breakpoint) {\n        const themeSpacingValue = Number(propValue);\n        const lastBreakpoint = Object.keys(columnValues).pop();\n        const spacing = getValue(transformer, themeSpacingValue);\n        const column = typeof columnValues === 'object' ? columnValues[breakpoint] || columnValues[lastBreakpoint] : columnValues;\n        const width = `${(100 / column).toFixed(2)}%`;\n        return {\n          '& > *': {\n            width: `calc(${width} - ${spacing})`\n          }\n        };\n      }\n\n      return null;\n    }));\n  }\n\n  return styles;\n};\nconst MasonryRoot = styled('div', {\n  name: 'MuiMasonry',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    return [styles.root];\n  }\n})(getStyle);\nconst Masonry = /*#__PURE__*/React.forwardRef(function Masonry(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiMasonry'\n  });\n\n  const {\n    children,\n    className,\n    component = 'div',\n    columns = 4,\n    spacing = 1,\n    defaultColumns,\n    defaultHeight,\n    defaultSpacing\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const masonryRef = React.useRef();\n  const [maxColumnHeight, setMaxColumnHeight] = React.useState();\n  const isSSR = !maxColumnHeight && defaultHeight && defaultColumns !== undefined && defaultSpacing !== undefined;\n  const [numberOfLineBreaks, setNumberOfLineBreaks] = React.useState(isSSR ? defaultColumns - 1 : 0);\n\n  const ownerState = _extends({}, props, {\n    spacing,\n    columns,\n    maxColumnHeight,\n    defaultColumns,\n    defaultHeight,\n    defaultSpacing,\n    isSSR\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  React.useEffect(() => {\n    const handleResize = () => {\n      const parentWidth = masonryRef.current.clientWidth;\n      const childWidth = masonryRef.current.firstChild.clientWidth;\n      const firstChildComputedStyle = window.getComputedStyle(masonryRef.current.firstChild);\n      const firstChildMarginLeft = Number(firstChildComputedStyle.marginLeft.replace('px', ''));\n      const firstChildMarginRight = Number(firstChildComputedStyle.marginRight.replace('px', ''));\n\n      if (parentWidth === 0 || childWidth === 0) {\n        return;\n      }\n\n      const currentNumberOfColumns = Math.round(parentWidth / (childWidth + firstChildMarginLeft + firstChildMarginRight));\n      const columnHeights = new Array(currentNumberOfColumns).fill(0);\n      let skip = false;\n      masonryRef.current.childNodes.forEach(child => {\n        if (child.nodeType !== Node.ELEMENT_NODE || child.dataset.class === 'line-break' || skip) {\n          return;\n        }\n\n        const childComputedStyle = window.getComputedStyle(child);\n        const childMarginTop = Number(childComputedStyle.marginTop.replace('px', ''));\n        const childMarginBottom = Number(childComputedStyle.marginBottom.replace('px', '')); // if any one of children isn't rendered yet, masonry's height shouldn't be computed yet\n\n        const childHeight = child.clientHeight ? Math.ceil(child.clientHeight) + childMarginTop + childMarginBottom : 0;\n\n        if (childHeight === 0) {\n          skip = true;\n          return;\n        } // if there is a nested image that isn't rendered yet, masonry's height shouldn't be computed yet\n\n\n        for (let i = 0; i < child.childNodes.length; i += 1) {\n          const nestedChild = child.childNodes[i];\n\n          if (nestedChild.tagName === 'IMG' && nestedChild.clientHeight === 0) {\n            skip = true;\n            break;\n          }\n        }\n\n        if (!skip) {\n          // find the current shortest column (where the current item will be placed)\n          const currentMinColumnIndex = columnHeights.indexOf(Math.min(...columnHeights));\n          columnHeights[currentMinColumnIndex] += childHeight;\n          const order = currentMinColumnIndex + 1;\n          child.style.order = order;\n        }\n      });\n\n      if (!skip) {\n        setMaxColumnHeight(Math.max(...columnHeights));\n        const numOfLineBreaks = currentNumberOfColumns > 0 ? currentNumberOfColumns - 1 : 0;\n        setNumberOfLineBreaks(numOfLineBreaks);\n      }\n    }; // IE and old browsers are not supported\n\n\n    if (typeof ResizeObserver === 'undefined') {\n      return null;\n    }\n\n    const resizeObserver = new ResizeObserver(handleResize);\n    const container = masonryRef.current;\n\n    if (container) {\n      // only the masonry container and its first child are observed for resizing;\n      // this might cause unforeseen problems in some use cases;\n      resizeObserver.observe(container);\n\n      if (container.firstChild) {\n        resizeObserver.observe(container.firstChild);\n      }\n    }\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [columns, spacing]);\n  const handleRef = useForkRef(ref, masonryRef);\n  const lineBreakStyle = {\n    flexBasis: '100%',\n    width: 0,\n    margin: 0,\n    padding: 0\n  }; //  columns are likely to have different heights and hence can start to merge;\n  //  a line break at the end of each column prevents columns from merging\n\n  const lineBreaks = new Array(numberOfLineBreaks).fill('').map((_, index) => /*#__PURE__*/_jsx(\"span\", {\n    \"data-class\": \"line-break\",\n    style: _extends({}, lineBreakStyle, {\n      order: index + 1\n    })\n  }, index));\n  return /*#__PURE__*/_jsxs(MasonryRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ref: handleRef,\n    ownerState: ownerState\n  }, other, {\n    children: [children, lineBreaks]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Masonry.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Number of columns.\n   * @default 4\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The default number of columns of the component. This is provided for server-side rendering.\n   */\n  defaultColumns: PropTypes.number,\n\n  /**\n   * The default height of the component in px. This is provided for server-side rendering.\n   */\n  defaultHeight: PropTypes.number,\n\n  /**\n   * The default spacing of the component. Like `spacing`, it is a factor of the theme's spacing. This is provided for server-side rendering.\n   */\n  defaultSpacing: PropTypes.number,\n\n  /**\n   * Defines the space between children. It is a factor of the theme's spacing.\n   * @default 1\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Masonry;"]},"metadata":{},"sourceType":"module"}